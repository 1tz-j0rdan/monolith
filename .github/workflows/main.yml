name: Release

on:
  push:
    paths:
      - installer/version.txt
    branches:
      - main
  workflow_dispatch:

jobs:
  image:
    name: export KiCAD images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache KiCAD
        uses: actions/cache@v4
        id: cache-kicad
        with:
            path: "/var/cache/apt"
            key: kicad-8.0

      - name: Install KiCAD
        env:
          CACHE_HIT: ${{steps.cache-kicad.outputs.cache-hit}}
        run: |
            if [[ "$CACHE_HIT" == 'true' ]]; then
              sudo cp --verbose --force --recursive ~/kicad/* /
            else
              sudo add-apt-repository ppa:kicad/kicad-8.0-releases
              sudo apt-get update
              sudo apt-get install -y kicad
              mkdir -p ~/kicad
              sudo dpkg -L kicad | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/kicad/
            fi

      - name: generate images
        run: |
          mkdir -p kicad_svg
          kicad-cli sch export svg device/hardware/TMA-1.kicad_sch -o kicad_svg --exclude-drawing-sheet --no-background-color
          kicad-cli pcb export svg device/hardware/TMA-1.kicad_pcb -o kicad_svg/artwork.svg --layers "B.Cu,F.Cu,F.Silkscreen,B.Silkscreen,User.Drawings,Edge.Cuts" --exclude-drawing-sheet

      - uses: int128/upload-artifact-wiki-action@v1
        id: upload-artifact-wiki-action
        with:
          path: kicad_svg/*.svg

      - uses: actions/upload-artifact@v4
        with:
          name: kicad
          path: kicad_svg

  config_tool:
    name: build TMA-1 config tool
    runs-on: windows-latest
    env:
      KIVY_GL_BACKEND: 'angle_sdl2'

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r builder/config/requirements.txt
          pip install pyinstaller

      - name: package TMA-1 config tool
        run: |
          pyinstaller builder/main.spec

      - name: cleanup
        shell: cmd
        run: |
          move dist\main.exe builder
          rmdir /S /Q build dist

      - name: read version
        shell: bash
        run: |
          tag=`cat installer/version.txt`
          echo "tag=$tag" >> $GITHUB_ENV

      - name: zip artifacts
        run: Compress-Archive -Path ./* -Destination monolith-${{ env.tag }}.zip

      - uses: actions/upload-artifact@v4
        with:
          name: monolith-${{ env.tag }}
          path: monolith-${{ env.tag }}.zip

  installer:
    name: build Monolith installer
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyinstaller

      - name: package installer
        run: |
          pyinstaller installer/install.spec

      - uses: actions/upload-artifact@v4
        with:
          name: install
          path: dist/install.exe

  release:
    name: release
    runs-on: ubuntu-latest
    needs: [config_tool, installer]
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4

      - name: read version
        shell: bash
        run: |
          tag=`cat installer/version.txt`
          echo "tag=$tag" >> $GITHUB_ENV

      - uses: actions/download-artifact@v4

      - run: mv install/install.exe monolith-installer-${{ env.tag }}.exe

      - uses: ncipollo/release-action@v1
        with:
          skipIfReleaseExists: true
          artifacts: "monolith-installer-${{ env.tag }}.exe,monolith-${{ env.tag }}/monolith-${{ env.tag }}.zip"
          tag: ${{ env.tag }}
          commit: ${{ github.sha }}
          body: "[monolith-installer-${{ env.tag }}.exe](https://github.com/luftaquila/monolith/releases/download/${{ env.tag }}/monolith-installer-${{ env.tag }}.exe)"